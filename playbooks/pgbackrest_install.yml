- name: PgBackrest Install
  hosts: all
  become: yes
  vars_files:
    - ../vars/percona_install_vars.yml

  tasks:
    - name: Install Backrest 
      yum:
        name: percona-pgbackrest
        state: present

    - name: Copy ssh keys
      shell: |
        cat <<EOF> /root/.ssh/id_ecdsa
        -----BEGIN OPENSSH PRIVATE KEY-----
        b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAaAAAABNlY2RzYS
        1zaGEyLW5pc3RwMjU2AAAACG5pc3RwMjU2AAAAQQQRJFoqSwPQJrJnQsjmYABUHUFauNEX
        BR4bxlv8N0Wp6kKO5uqOkxpgVw/hywJD6jdPOy7xo95AjeLDywVy2yfDAAAAsF03TwVdN0
        8FAAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBEkWipLA9AmsmdC
        yOZgAFQdQVq40RcFHhvGW/w3RanqQo7m6o6TGmBXD+HLAkPqN087LvGj3kCN4sPLBXLbJ8
        MAAAAhAIByB7LhyzgNEO2pGMdPcOgUcTNEbbBOT72fw3uOUrg7AAAAFHJvb3RAb3JhLTgt
        cGVyY29uYS1tAQID
        -----END OPENSSH PRIVATE KEY-----
        EOF
        chmod 600 /root/.ssh/id_ecdsa
        cat <<EOF> /root/.ssh/config
        Host *
           StrictHostKeyChecking accept-new
        EOF

    - name: Add public key to authorized keys
      shell: |
        echo "ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBEkWipLA9AmsmdCyOZgAFQdQVq40RcFHhvGW/w3RanqQo7m6o6TGmBXD+HLAkPqN087LvGj3kCN4sPLBXLbJ8M= root@ora-8-percona-m" >> /root/.ssh/authorized_keys
      when: inventory_hostname in groups["backrest"]
    
    - name: Create PgBackrest config on backrest node
      shell: |
        export SRV_NAME={{ percona_backrest_fqdn }}
        export NODE1_NAME="node1"
        export NODE2_NAME="node2"
        export NODE3_NAME="node3"
        export CA_PATH="/etc/ssl/certs/pg_ha"
        mkdir -p {{ pgbackrest_repo1_path }}
        chmod 750 {{ pgbackrest_repo1_path }}
        chown postgres:postgres {{ pgbackrest_repo1_path }}
        cp /etc/pgbackrest.conf /etc/pgbackrest.conf.bak         
        
        cat <<EOF > /etc/pgbackrest.conf
        [global]

        repo1-path={{ pgbackrest_repo1_path }}

        repo1-retention-archive-type=full

        repo1-retention-full=4

        process-max=12
        log-level-console=info
        log-level-file=info
        start-fast=y
        delta=y
        backup-standby=y

        tls-server-address=*
        tls-server-cert-file=${CA_PATH}/${SRV_NAME}.crt
        tls-server-key-file=${CA_PATH}/${SRV_NAME}.key
        tls-server-ca-file=${CA_PATH}/ca.crt

        tls-server-auth=${NODE1_NAME}=cluster_1
        tls-server-auth=${NODE2_NAME}=cluster_1
        tls-server-auth=${NODE3_NAME}=cluster_1

        [cluster_1]
        pg1-host=${NODE1_NAME}
        pg1-host-port=8432
        pg1-port=5432
        pg1-path={{ pg_data_dir }}
        pg1-host-type=tls
        pg1-host-cert-file=${CA_PATH}/${SRV_NAME}.crt
        pg1-host-key-file=${CA_PATH}/${SRV_NAME}.key
        pg1-host-ca-file=${CA_PATH}/ca.crt
        pg1-socket-path=/var/run/postgresql

        pg2-host=${NODE2_NAME}
        pg2-host-port=8432
        pg2-port=5432
        pg2-path={{ pg_data_dir }}
        pg2-host-type=tls
        pg2-host-cert-file=${CA_PATH}/${SRV_NAME}.crt
        pg2-host-key-file=${CA_PATH}/${SRV_NAME}.key
        pg2-host-ca-file=${CA_PATH}/ca.crt
        pg2-socket-path=/var/run/postgresql

        pg3-host=${NODE3_NAME}
        pg3-host-port=8432
        pg3-port=5432
        pg3-path={{ pg_data_dir }}
        pg3-host-type=tls
        pg3-host-cert-file=${CA_PATH}/${SRV_NAME}.crt
        pg3-host-key-file=${CA_PATH}/${SRV_NAME}.key
        pg3-host-ca-file=${CA_PATH}/ca.crt
        pg3-socket-path=/var/run/postgresql
        EOF
      when: inventory_hostname in groups["backrest"]

    - name: Create Certs on backrest node
      shell: |
        export SRV_NAME={{ percona_backrest_fqdn }}
        export NODE1_NAME="node1"
        export NODE2_NAME="node2"
        export NODE3_NAME="node3"
        export CA_PATH="/etc/ssl/certs/pg_ha"
        mkdir -p ${CA_PATH}
        openssl req -new -x509 -days 3650 -nodes -out ${CA_PATH}/ca.crt -keyout ${CA_PATH}/ca.key -subj "/CN=root-ca"
        for node in ${SRV_NAME} ${NODE1_NAME} ${NODE2_NAME} ${NODE3_NAME}
        do
          openssl req -new -nodes -out ${CA_PATH}/$node.csr -keyout ${CA_PATH}/$node.key -subj "/CN=$node";
        done
        for node in ${SRV_NAME} ${NODE1_NAME} ${NODE2_NAME} ${NODE3_NAME}
        do
          openssl x509 -req -in ${CA_PATH}/$node.csr -days 3650 -CA ${CA_PATH}/ca.crt -CAkey ${CA_PATH}/ca.key -CAcreateserial -out ${CA_PATH}/$node.crt;
        done
        rm -f ${CA_PATH}/*.csr
        chown postgres:postgres -R ${CA_PATH}
        chmod 0600 ${CA_PATH}/*
      when: inventory_hostname in groups["backrest"]

    - name: Create PgBacrest Service on backrest node
      shell: |
        cat <<EOF >  /etc/systemd/system/pgbackrest.service
        [Unit]
        Description=pgBackRest Server
        After=network.target

        [Service]
        Type=simple
        User=postgres
        Restart=always
        RestartSec=1
        ExecStart=/usr/bin/pgbackrest server
        #ExecStartPost=/bin/sleep 3
        #ExecStartPost=/bin/bash -c "[ ! -z $MAINPID ]"
        ExecReload=/bin/kill -HUP $MAINPID
   
        [Install]
        WantedBy=multi-user.target
        EOF
      when: inventory_hostname in groups["backrest"]

    - name: Start pgBackrest service on backrest node
      systemd:
        name: pgbackrest
        state: started
        enabled: yes
        daemon-reload: yes
      when: inventory_hostname in groups["backrest"]
    
    - name: create pgBackrest config on node1 node2 node3
      shell: |
        export CA_PATH="/etc/ssl/certs/pg_ha"
        export SRV_NAME={{ percona_backrest_fqdn }}
        export NODE_NAME=$(grep $(hostname -A) /etc/hosts | awk '{print $3}')
        mkdir -p ${CA_PATH}
        scp ${SRV_NAME}:${CA_PATH}/{$NODE_NAME.crt,$NODE_NAME.key,ca.crt} ${CA_PATH}/
        chown postgres:postgres -R ${CA_PATH}
        chmod 0600 ${CA_PATH}/*

        cat <<EOF >  /etc/pgbackrest.conf
        [global]
        repo1-host=${SRV_NAME}
        repo1-host-user=postgres
        repo1-host-type=tls
        repo1-host-cert-file=${CA_PATH}/${NODE_NAME}.crt
        repo1-host-key-file=${CA_PATH}/${NODE_NAME}.key
        repo1-host-ca-file=${CA_PATH}/ca.crt

        process-max=16
        log-level-console=info
        log-level-file=debug

        tls-server-address=*
        tls-server-cert-file=${CA_PATH}/${NODE_NAME}.crt
        tls-server-key-file=${CA_PATH}/${NODE_NAME}.key
        tls-server-ca-file=${CA_PATH}/ca.crt
        tls-server-auth=${SRV_NAME}=cluster_1

        [cluster_1]
        pg1-path={{ pg_data_dir }}

        EOF
      when: inventory_hostname in groups["pgnodes"]

    - name: Start pgBackrest service on node1 node2 node3
      systemd:
        name: pgbackrest
        state: started
        enabled: yes
        daemon-reload: yes
      when: inventory_hostname in groups["pgnodes"]

    - name: Versionloct packages
      community.general.yum_versionlock:
        state: present
        name:
         - percona-pgbackrest
