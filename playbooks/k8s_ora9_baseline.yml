- name: Kubernetes Dependencies
  hosts: all
  become: yes
  vars_files:
    - ../vars/k8s_ora9_baseline_vars.yml

  tasks:
    - name: Updates
      yum:
        update_cache: yes

    - name: install yum-utils if needed
      yum:
        name: yum-utils
        state: present

    - name: install wget if needed
      yum:
        name: wget
        state: present

    - name: Get K9S RPM and Install
      shell: |
        wget https://github.com/derailed/k9s/releases/download/v0.40.10/k9s_linux_amd64.rpm -O /tmp/k9s_linux_amd64.rpm
        rpm -i /tmp/k9s_linux_amd64.rpm
      tags: k9s

    - name: check if reboot is required
      ansible.builtin.shell:
        cmd: "needs-restarting -r -s"
      register: needs_restarting
      changed_when: needs_restarting.rc == 1
      tags: reboot

    - name: do reboot if needed
      ansible.builtin.reboot:
      when: needs_restarting.rc == 1
      tags: reboot

    - name: Disable SWAP
      shell: |
        swapoff -a

    - name: Install chrony
      yum:
        name: chrony
        state: present
    
    - name: Restart chrony service
      systemd:
        name: chronyd
        state: restarted
        enabled: yes
        daemon-reload: yes

    - name: Disable SWAP in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'


    - name: Create an empty file for the containerd module
      copy:
        content: ""
        dest: /etc/modules-load.d/containerd.conf
        force: no


    - name: Configure modules for containerd
      blockinfile:
        path: /etc/modules-load.d/containerd.conf
        block: |
          overlay
          br_netfilter


    - name: Create an empty file for K8S sysctl parameters
      copy:
        content: ""
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        force: no


    - name: Configure sysctl parameters for K8S
      lineinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        line: "{{ item }}"
      with_items:
        - "net.bridge.bridge-nf-call-iptables  = 1"
        - "net.ipv4.ip_forward                 = 1"
        - "net.bridge.bridge-nf-call-ip6tables = 1"


    - name: Apply sysctl parameters
      command: sysctl --system
    
    
    - name: add Docker repo
      shell: |
        cat <<EOF > /etc/yum.repos.d/docker.repo
        [docker-ce-stable]
        name=Docker CE Stable
        baseurl=https://download.docker.com/linux/centos/9/x86_64/stable
        enabled=1
        gpgcheck=0
        gpgkey=https://download.docker.com/linux/centos/gpg


    - name: Add Kubernetes yum repository
      shell: |
         cat <<EOF > /etc/yum.repos.d/kubernetes_o.repo
         [kubernetes_o]
         name=Kubernetes v{{ kubernetes_repo_version }}
         baseurl=https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_repo_version }}/rpm/
         gpgcheck=0
         enabled=1
         gpgkey=https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_repo_version }}/rpm/repodata/repomd.xml.key


    - name: Install containerd
      yum:
        name: containerd.io-1.7.*
        state: present
    

    - name: Create containerd directory
      file:
        path: /etc/containerd
        state: directory


    - name: Add containerd configuration
      shell: /usr/bin/containerd config default > /etc/containerd/config.toml


    - name: Configuring Systemd cgroup driver for containerd
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: "            SystemdCgroup = false"
        line: "            SystemdCgroup = true"

    - name: Disable Selinux in config
      shell: |
        cat <<EOF > /etc/selinux/config
        SELINUX=deisabled
        SELINUXTYPE=targeted

    - name: Disable Selinux in config
      shell: |
        setenforce 0

    - name: Install Haproxy
      yum:
        name: haproxy
        state: present
        update_cache: true
      when: inventory_hostname in groups["masters"]

    - name: Backup default haproxy config
      shell: mv /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.old
      when: inventory_hostname in groups["masters"]

    - name: Create haproxy config
      shell: |
        cat <<EOF > /etc/haproxy/haproxy.cfg
        global
          log /var/log/haproxy.log local0
          log /var/log/ local1 notice
          log 127.0.0.1:514 local0 debug
          log /dev/null local0

          chroot      /var/lib/haproxy
          pidfile     /var/run/haproxy.pid
          maxconn     4000
          user        haproxy
          group       haproxy
          daemon

          stats socket /var/lib/haproxy/stats

        defaults
          mode                    http
          log                     global
          option                  httplog
          option                  dontlognull
          option http-server-close
          option forwardfor       except 127.0.0.0/8
          option                  redispatch
          retries                 3
          timeout http-request    10s
          timeout queue           1m
          timeout connect         10s
          timeout client          1m
          timeout server          1m
          timeout http-keep-alive 10s
          timeout check           10s
          maxconn                 3000

        #---------------------------------------------------------------------
        # apiserver frontend which proxys to the masters
        #---------------------------------------------------------------------
        frontend apiserver
            bind *:8443
            mode tcp
            option tcplog
            default_backend apiserver
        #---------------------------------------------------------------------
        # round robin balancing for apiserver
        #---------------------------------------------------------------------
        backend apiserver
            option httpchk GET /healthz
            http-check expect status 200
            mode tcp
            option ssl-hello-chk
            balance     roundrobin
                server {{ cluster_name }}-m1{{ cluster_sufix }} {{ master_1_ip }}:6443 check
                server {{ cluster_name }}-m2{{ cluster_sufix }} {{ master_2_ip }}:6443 check
                server {{ cluster_name }}-m3{{ cluster_sufix }} {{ master_3_ip }}:6443 check
      when: inventory_hostname in groups["masters"]

    - name: Restart HaProxy Service
      systemd:
        name: haproxy
        state: restarted
        enabled: yes
        daemon-reload: yes
      when: inventory_hostname in groups["masters"]
    
    - name: Install Keeplalived
      yum:
        name: keepalived
        state: present
        update_cache: true
      when: inventory_hostname in groups["masters"]

    - name: Create keepalived check script
      shell: |
        cat <<EOF > /etc/keepalived/check_apiserver.sh
        #!/bin/sh
        errorExit() {
            echo "*** $*" 1>&2
            exit 1
        }

        curl --silent --max-time 2 --insecure https://localhost:6443/ -o /dev/null || errorExit "Error GET https://localhost:6443/"
        if ip addr | grep -q {{ apiserver_vip }}; then
            curl --silent --max-time 2 --insecure https://{{ apiserver_vip }}:6443/ -o /dev/null || errorExit "Error GET https://{{ apiserver_vip }}:6443/"
        fi
        EOF
        chmod +x /etc/keepalived/check_apiserver.sh
      when: inventory_hostname in groups["masters"]

    - name: Backup default keepalived config
      shell: mv /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.old
      when: inventory_hostname in groups["masters"]

    - name: Create keepalived config on master1
      shell: |
        cat <<EOF > /etc/keepalived/keepalived.conf
        global_defs {
            enable_script_security
            router_id LVS_DEVEL
        }
        vrrp_script check_apiserver {
          script "/etc/keepalived/check_apiserver.sh"
          interval 3
          weight -2
          fall 10
          rise 2
        }

        vrrp_instance VI_1 {
            state MASTER
            interface {{ interface_name }}
            virtual_router_id {{ virtual_router_id }}   
            priority 255       
            authentication {
                auth_type PASS
                auth_pass P@##D321!
            }
            virtual_ipaddress {
                {{ apiserver_vip }}/32 
            }
            track_script {
                check_apiserver
            }
        }
      when: inventory_hostname == groups.masters[0]
    
    - name: Create keepalived config on master2
      shell: |
        cat <<EOF > /etc/keepalived/keepalived.conf
        global_defs {
            enable_script_security
            router_id LVS_DEVEL
        }
        vrrp_script check_apiserver {
          script "/etc/keepalived/check_apiserver.sh"
          interval 3
          weight -2
          fall 10
          rise 2
        }

        vrrp_instance VI_1 {
            state BACKUP
            interface {{ interface_name }}
            virtual_router_id {{ virtual_router_id }}   
            priority 254       
            authentication {
                auth_type PASS
                auth_pass P@##D321!
            }
            virtual_ipaddress {
                {{ apiserver_vip }}/32 
            }
            track_script {
                check_apiserver
            }
        }
      when: inventory_hostname == groups.masters[1]


    - name: Create keepalived config on master3
      shell: |
        cat <<EOF > /etc/keepalived/keepalived.conf
        global_defs {
            enable_script_security
            router_id LVS_DEVEL
        }
        vrrp_script check_apiserver {
          script "/etc/keepalived/check_apiserver.sh"
          interval 3
          weight -2
          fall 10
          rise 2
        }

        vrrp_instance VI_1 {
            state BACKUP
            interface {{ interface_name }}
            virtual_router_id {{ virtual_router_id }}   
            priority 253       
            authentication {
                auth_type PASS
                auth_pass P@##D321!
            }
            virtual_ipaddress {
                {{ apiserver_vip }}/32 
            }
            track_script {
                check_apiserver
            }
        }
      when: inventory_hostname == groups.masters[2]

    - name: Create keepalived user
      ansible.builtin.user:
        name: keepalived_script
        shell: /bin/bash
        createhome: no
      when: inventory_hostname in groups["masters"]
      tags: keepalived
    
    - name: Restart Keepalived service
      systemd:
        name: keepalived
        state: restarted
        enabled: yes
        daemon-reload: yes
      when: inventory_hostname in groups["masters"]
    
    - name: Disable Firewall Service
      systemd:
        name: firewalld
        state: stopped
        enabled: false 

    - name: Enable the containerd service and start service
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon-reload: yes


    - name: Install Kubelet
      yum:
        name: kubelet-{{ kubernetes_version }}
        state: present
        update_cache: true



    - name: Install Kubeadm
      yum:
        name: kubeadm-{{ kubernetes_version }}
        state: present
    

    - name: Install Kubectl
      yum:
        name: kubectl-{{ kubernetes_version }}
        state: present


    - name: Enable the Kubelet service
      service:
        name: kubelet
        enabled: yes


    - name: Load br_netfilter kernel module
      modprobe:
        name: br_netfilter
        state: present


    - name: Set bridge-nf-call-iptables
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1


    - name: Set ip_forward
      sysctl:
        name: net.ipv4.ip_forward
        value: 1

    - name: Install Yum Versionlock
      yum:
        name: yum-plugin-versionlock
        state: present

    - name: Versionloct packages
      community.general.yum_versionlock:
        state: present
        name:
          - kubeadm
          - kubelet
          - kubectl
          - kubernetes-cni
          - cri-tools

    - name: Reboot
      reboot:
      tags: reboot
